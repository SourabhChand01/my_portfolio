

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Maxim Mavrichev (https://sketchfab.com/mvrc.art)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/meteor-d3a5a7e9a7d24b76841bf0f49d56a5f3
Title: Meteor
*/
import React, { useRef, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";

export default function Meteor({
  isMobile = false,
  speed = 0.01,
  rotationSpeed = 0.01,
  direction = [1, 0, 0],
  baseX = 0,
  baseY = 0,
  speedX = 0.5,
  speedY = 0.3,
  rangeX = 1,
  rangeY = 1,
  ...props
}) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/meteor.glb");
  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    console.log("Meteor model loaded:", nodes);

    if (animations.length > 0) {
      actions[animations[0].name]?.play();
    }
  }, [actions, animations]);

  useFrame((state, delta) => {
    if (!group.current) return;

    if (!isMobile) {
      // Desktop: linear motion
      group.current.position.x += direction[0] * delta * 60;
      group.current.position.y += direction[1] * delta * 60;
    } else {
      // Mobile: floating circular motion
      const t = state.clock.elapsedTime;
      group.current.position.x = baseX + Math.sin(t * speedX) * rangeX;
      group.current.position.y = baseY + Math.cos(t * speedY) * rangeY;
    }

    // Rotation
    group.current.rotation.y += rotationSpeed * delta * 60;
    group.current.rotation.x += (rotationSpeed / 2) * delta * 60;
  });

  return (
  
    <group ref={group} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_2.geometry}
        material={materials.Material}
        rotation={[-Math.PI / 2, -0.2, 2.2]}
        scale={props.scale || 0.3}
        position={props.position || [0, 0, 0]}
      />

    </group>
  );
}

useGLTF.preload("/meteor.glb");
